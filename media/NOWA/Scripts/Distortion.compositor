compositor_node SceneRenderingNode
{
	// rt0 is used to render the scene
	// rt_distortion is the texture we will be rendering distortion objects. The texture is later used to postprocess the scene
	
	texture rt0				target_width target_height PFG_RGBA16_FLOAT depth_pool 2 depth_format PFG_D32_FLOAT msaa_auto
	texture rt_distortion	target_width target_height PFG_RGBA16_FLOAT depth_pool 2 depth_format PFG_D32_FLOAT msaa_auto
    
	target rt0
	{
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.6 0.6 0.6 1
			}

			//lod_update_list	off					//Turn Lod off?
			shadows				PbsMaterialsShadowNode
			overlays			off
            rq_first	0
			rq_last		16
		}
	}
    
    target rt_distortion
    {
		//Render distortion to its own texture with render queue id 6
		pass render_scene
		{
			load
			{
				// Clear distortion texture to default values. R and G are representing
				// distortion vectors along X and Y axis. A is controlling distortion strenght.
				colour			clear
				clear_colour	0.5 0.5 0 0
			}

			lod_update_list	off
			overlays			off
			rq_first	16
			rq_last		17
		}
	}
	
	out 0 rt0
    out 1 rt_distortion
}

compositor_node DistortionNode
{
	texture rt_output		target_width target_height PFG_RGBA16_FLOAT depth_pool 2 depth_format PFG_D32_FLOAT msaa_auto

	in 0 rt_scene
    in 1 rt_distortion
    
	target rt_output
	{
		pass render_quad
		{
			load
			{
				all dont_care
			}
			material Distortion/Quad
	    	input 0 rt_scene
            input 1 rt_distortion
		}
		
		pass render_scene
		{
			lod_update_list	off

			//Render Overlays
			overlays	on
			rq_first	254
			rq_last		255
		}
	}
	
	out 0 rt_output
	out 1 rt_scene
}
