// Performs the final pass: Takes the temporary textures (created in prior node) and copies it to the actual RenderWindow
compositor_node NOWAPbsFinalCompositionNode
{
	in 0 rt_output
	// Take input texture #1 and use the local name "rtN" for reference in this scope
	in 1 rtN

	target rt_output
	{
		pass render_quad
	    {
			load { all dont_care }
			// For Compositor effects
			//Ignore the alpha channel
			material 	Ogre/Copy/4xFP32
	    	input 0 	rtN
		}
		
		pass render_scene
		{
			lod_update_list	off

			//Render Overlays
			overlays		on
			rq_first		254
			rq_last			255
		}
		
		// Render MYGUI in pass here, so that no effect will be placed on the GUI!
		pass custom MYGUI
		{
		   
		}
	}
}

compositor_node NOWAHdrFinalCompositionNode
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			lod_update_list	off

			//Render Overlays
			overlays	on
			rq_first	254
			rq_last		255
		}
		
		// Render MYGUI in pass here, so that no effect will be placed on the GUI!
		pass custom MYGUI
		{
		   
		}
	}

	// This output is not always used.
	out 0 rt_output
}

abstract target cubemap_target_shadow
{
	pass render_scene
	{
		load
		{
			all									clear
			clear_colour_reverse_depth_aware	1 1 1 1
		}
		store
		{
			//We only care about the contents of the colour target with point shadows
			depth			dont_care
			stencil			dont_care
		}
		camera_cubemap_reorient true
	}
}

compositor_node_shadow NOWAShadowNode
{
	technique pssm

	texture atlas		2048 7168 PFG_D32_FLOAT
	texture tmpCubemap	2048 2048 PFG_R32_FLOAT cubemap depth_format PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	// normal_offset_bias 168
	// constant_bias_scale 1.0
	shadow_map 0 atlas uv 0.0 0.000000000000000 1.0 0.285714285714286 light 0 split 0
	shadow_map 1 atlas uv 0.0 0.285714285714286 0.5 0.142857142857143 light 0 split 1
	shadow_map 2 atlas uv 0.5 0.285714285714286 0.5 0.142857142857143 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.0 0.428571428571429 1.0 0.285714285714286 light 1
	shadow_map 4 atlas uv 0.0 0.714285714285714 1.0 0.285714285714286 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsm
					input 0 tmpCubemap
				}
			}
		}
	}
}

abstract compositor_node_shadow NOWAESMShadowNodeBase
{
	texture atlas				2048 4096 PFG_R16_UNORM uav depth_format PFG_D32_FLOAT
	texture tmpGaussianFilter	2048 4096 PFG_R16_UNORM depth_pool 0 uav
	texture tmpCubemap			 512  512 PFG_R16_UNORM cubemap depth_format PFG_D32_FLOAT

	technique pssm
	num_splits		3
	pssm_lambda		0.70
	shadow_map 0 atlas uv 0.00 0.00 0.50 0.25 light 0 split 0
	shadow_map 1 atlas uv 0.00 0.25 1.00 0.50 light 0 split 1
	shadow_map 2 atlas uv 0.50 0.00 0.50 0.25 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.00 0.75 0.50 0.25 light 1
	shadow_map 4 atlas uv 0.50 0.75 0.50 0.25 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
				store
				{
					depth	dont_care
					stencil	dont_care
				}
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
				store
				{
					depth	dont_care
					stencil	dont_care
				}
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					store
					{
						depth	dont_care
						stencil	dont_care
					}
					material Ogre/DPSM/CubeToDpsmColour
					input 0 tmpCubemap
				}
			}
		}
	}
}

compositor_node_shadow NOWAESMShadowNodeCompute : NOWAESMShadowNodeBase
{
	//Skip already defined "target atlas" which does the clear. We do not want to override it.
	target atlas {}

	//Add a compute-based gauss filter
	target
	{
		pass compute
		{
			job ESM/GaussianLogFilterH
			input 0 atlas
			uav 0 tmpGaussianFilter write
		}

		pass compute
		{
			job ESM/GaussianLogFilterV
			input 0 tmpGaussianFilter
			uav 0 atlas write
		}
	}
}

compositor_node_shadow NOWAESMShadowNodePixelShader : NOWAESMShadowNodeBase
{
	//Skip already defined "target atlas" which does the clear. We do not want to override it.
	target atlas {}

	//Add a pixel-based gauss filter
	target tmpGaussianFilter
	{
		pass render_quad
		{
			load { all dont_care }
			material ESM/GaussianLogFilterH
			input 0 atlas
		}
	}

	target atlas
	{
		pass render_quad
		{
			load { all dont_care }
			material ESM/GaussianLogFilterV
			input 0 tmpGaussianFilter
		}
	}
}